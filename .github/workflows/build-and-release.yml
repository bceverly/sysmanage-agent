name: Build and Release

on:
  # Trigger on version tags (e.g., v1.0.0, v2.1.3)
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # Needed for creating releases and pushing to repos

jobs:
  # Wait for CI tests to pass before building
  wait-for-tests:
    name: Wait for CI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'Backend Tests (Python 3.10)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  # Ubuntu/Debian .deb Package Build
  build-ubuntu:
    name: Build .deb Package
    runs-on: ubuntu-22.04
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            dh-python \
            python3-all \
            python3-setuptools \
            python3-pip \
            build-essential \
            devscripts \
            lintian

      - name: Install SBOM generation tools
        run: |
          # Install cyclonedx-bom for Python
          python3 -m pip install cyclonedx-bom

          # Verify installation
          python3 -c "import cyclonedx_py; print('âœ“ cyclonedx-bom installed')"

      - name: Generate SBOM
        run: |
          echo "Generating Software Bill of Materials..."
          make sbom

      - name: Update changelog with version
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          DATE=$(date -R)

          # Update changelog with actual version and date
          sed -i "s/0\.1\.0-1/$VERSION-1/g" installer/ubuntu/debian/changelog
          sed -i "s/Mon, 14 Oct 2025 00:00:00 -0400/$DATE/g" installer/ubuntu/debian/changelog

      - name: Generate requirements-prod.txt
        run: |
          echo "Generating requirements-prod.txt from requirements.txt..."
          python3 scripts/update-requirements-prod.py

      - name: Create source tarball
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Create directory structure for Debian package
          mkdir -p ../sysmanage-agent-$VERSION

          # Copy source files
          cp -r src ../sysmanage-agent-$VERSION/
          cp main.py ../sysmanage-agent-$VERSION/
          cp alembic.ini ../sysmanage-agent-$VERSION/
          cp requirements.txt ../sysmanage-agent-$VERSION/
          cp requirements-prod.txt ../sysmanage-agent-$VERSION/
          cp README.md ../sysmanage-agent-$VERSION/ || touch ../sysmanage-agent-$VERSION/README.md
          cp -r installer/ubuntu/debian ../sysmanage-agent-$VERSION/

          # Copy installer files to the package
          mkdir -p ../sysmanage-agent-$VERSION/installer/ubuntu
          cp installer/ubuntu/*.service ../sysmanage-agent-$VERSION/installer/ubuntu/
          cp installer/ubuntu/*.sudoers ../sysmanage-agent-$VERSION/installer/ubuntu/
          cp installer/ubuntu/*.example ../sysmanage-agent-$VERSION/installer/ubuntu/

          # Copy SBOM to the package
          cp -r sbom ../sysmanage-agent-$VERSION/

          # Create orig tarball
          cd ..
          tar czf sysmanage-agent_$VERSION.orig.tar.gz sysmanage-agent-$VERSION/

          # Return to package directory
          cd sysmanage-agent-$VERSION

      - name: Build Debian package
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          cd ../sysmanage-agent-$VERSION

          # Build the package
          dpkg-buildpackage -us -uc -b

          # Move built package back to workspace
          mv ../sysmanage-agent_*.deb "$GITHUB_WORKSPACE/"
          mv ../sysmanage-agent_*.build* "$GITHUB_WORKSPACE/" || true
          mv ../sysmanage-agent_*.buildinfo "$GITHUB_WORKSPACE/" || true
          mv ../sysmanage-agent_*.changes "$GITHUB_WORKSPACE/" || true

      - name: Run lintian on package
        run: |
          lintian --no-tag-display-limit sysmanage-agent_*.deb || true

      - name: Generate package information
        id: package_info
        run: |
          DEB_FILE=$(ls sysmanage-agent_*.deb)
          echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT

          # Get package info
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE"

          # Generate SHA256 checksum
          sha256sum "$DEB_FILE" > "$DEB_FILE.sha256"

          echo "Package built: $DEB_FILE"
          echo "Size: $(du -h "$DEB_FILE" | cut -f1)"

      - name: Upload .deb as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-deb
          path: |
            sysmanage-agent_*.deb
            sysmanage-agent_*.deb.sha256

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-sbom
          path: |
            sbom/*.json

  # CentOS/RHEL/Fedora .rpm Package Build
  build-centos:
    name: Build .rpm Package
    runs-on: ubuntu-latest
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm createrepo-c python3-dev python3-pip python3-setuptools systemd

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Generate requirements-prod.txt
        run: |
          echo "Generating requirements-prod.txt from requirements.txt..."
          python3 scripts/update-requirements-prod.py

      - name: Set up RPM build tree
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Ensure we're in the right directory
          cd "$GITHUB_WORKSPACE"

          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Create source tarball
          TAR_NAME="sysmanage-agent-$VERSION"
          TAR_DIR="/tmp/$TAR_NAME"
          mkdir -p "$TAR_DIR"

          # Copy source files
          rsync -a --exclude='htmlcov' --exclude='__pycache__' --exclude='*.pyc' --exclude='.pytest_cache' \
            src/ "$TAR_DIR/src/"
          cp main.py "$TAR_DIR/"
          cp alembic.ini "$TAR_DIR/"
          cp requirements-prod.txt "$TAR_DIR/"
          cp README.md "$TAR_DIR/" || touch "$TAR_DIR/README.md"
          cp LICENSE "$TAR_DIR/" || touch "$TAR_DIR/LICENSE"

          # Copy installer files
          mkdir -p "$TAR_DIR/installer/centos"
          cp installer/centos/*.service "$TAR_DIR/installer/centos/"
          cp installer/centos/*.sudoers "$TAR_DIR/installer/centos/"
          cp installer/centos/*.example "$TAR_DIR/installer/centos/"
          cp installer/centos/sysmanage-agent.spec "$TAR_DIR/installer/centos/"

          # Create tarball
          cd /tmp
          tar czf ~/rpmbuild/SOURCES/sysmanage-agent-$VERSION.tar.gz "$TAR_NAME/"

          echo "Source tarball created"

      - name: Update spec file with version
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Extract spec file from source tarball
          tar -xzf ~/rpmbuild/SOURCES/sysmanage-agent-$VERSION.tar.gz -C /tmp \
            sysmanage-agent-$VERSION/installer/centos/sysmanage-agent.spec
          cp /tmp/sysmanage-agent-$VERSION/installer/centos/sysmanage-agent.spec ~/rpmbuild/SPECS/

          DATE=$(date "+%a %b %d %Y")

          # Update version and changelog date
          sed -i "s/^Version:.*/Version:        $VERSION/" ~/rpmbuild/SPECS/sysmanage-agent.spec
          sed -i "s/^\\* Mon Oct 14 2024/\\* $DATE/" ~/rpmbuild/SPECS/sysmanage-agent.spec

          echo "Spec file updated to version $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build RPM package
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Use --nodeps to skip dependency checking since we're building on Ubuntu
          rpmbuild -bb --nodeps ~/rpmbuild/SPECS/sysmanage-agent.spec

          # Find the built RPM
          RPM_FILE=$(find ~/rpmbuild/RPMS -name "sysmanage-agent-$VERSION-*.rpm" | head -1)

          if [ -z "$RPM_FILE" ]; then
            echo "ERROR: RPM package not found!"
            exit 1
          fi

          # Copy to workspace
          cp "$RPM_FILE" "$GITHUB_WORKSPACE/"

          echo "RPM package built: $(basename $RPM_FILE)"

      - name: Generate package information
        id: package_info
        run: |
          RPM_FILE=$(ls sysmanage-agent_*.rpm 2>/dev/null || ls sysmanage-agent-*.rpm)
          echo "rpm_file=$RPM_FILE" >> $GITHUB_OUTPUT

          # Get package info
          rpm -qip "$RPM_FILE"
          rpm -qlp "$RPM_FILE"

          # Generate SHA256 checksum
          sha256sum "$RPM_FILE" > "$RPM_FILE.sha256"

          echo "Package built: $RPM_FILE"
          echo "Size: $(du -h "$RPM_FILE" | cut -f1)"

      - name: Upload .rpm as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-rpm
          path: |
            sysmanage-agent*.rpm
            sysmanage-agent*.rpm.sha256

  # OpenSUSE/SLES .rpm Package Build (Matrix for 3 targets)
  build-opensuse:
    name: Build .rpm Package for ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: wait-for-tests
    strategy:
      matrix:
        target:
          - opensuse-leap
          - opensuse-tumbleweed
          - sles

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm createrepo-c python3-dev python3-pip python3-setuptools systemd

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Generate requirements-prod.txt
        run: |
          echo "Generating requirements-prod.txt from requirements.txt..."
          python3 scripts/update-requirements-prod.py

      - name: Set up RPM build tree
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Ensure we're in the right directory
          cd "$GITHUB_WORKSPACE"

          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Create source tarball
          TAR_NAME="sysmanage-agent-$VERSION"
          TAR_DIR="/tmp/$TAR_NAME"
          mkdir -p "$TAR_DIR"

          # Copy source files
          rsync -a --exclude='htmlcov' --exclude='__pycache__' --exclude='*.pyc' --exclude='.pytest_cache' \
            src/ "$TAR_DIR/src/"
          cp main.py "$TAR_DIR/"
          cp alembic.ini "$TAR_DIR/"
          cp requirements-prod.txt "$TAR_DIR/"
          cp README.md "$TAR_DIR/" || touch "$TAR_DIR/README.md"
          cp LICENSE "$TAR_DIR/" || touch "$TAR_DIR/LICENSE"

          # Copy installer files for openSUSE/SLES
          mkdir -p "$TAR_DIR/installer/opensuse"
          cp installer/opensuse/*.service "$TAR_DIR/installer/opensuse/" || true
          cp installer/opensuse/*.sudoers "$TAR_DIR/installer/opensuse/" || true
          cp installer/opensuse/*.example "$TAR_DIR/installer/opensuse/" || true
          cp installer/opensuse/sysmanage-agent.spec "$TAR_DIR/installer/opensuse/"

          # Create tarball
          cd /tmp
          tar czf ~/rpmbuild/SOURCES/sysmanage-agent-$VERSION.tar.gz "$TAR_NAME/"

          echo "Source tarball created"

      - name: Create vendor tarball for offline installation
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Create vendor directory and download all pip dependencies as wheels
          mkdir -p /tmp/vendor
          pip3 download -r requirements-prod.txt -d /tmp/vendor --platform manylinux2014_x86_64 --only-binary=:all: --python-version 311

          # Also download for any platform (for pure Python packages)
          pip3 download -r requirements-prod.txt -d /tmp/vendor --no-deps 2>/dev/null || true

          # Create vendor tarball
          cd /tmp
          tar czf ~/rpmbuild/SOURCES/sysmanage-agent-vendor-$VERSION.tar.gz vendor/

          echo "Vendor tarball created with $(ls -1 /tmp/vendor/*.whl | wc -l) wheels"
          ls -lh ~/rpmbuild/SOURCES/sysmanage-agent-vendor-$VERSION.tar.gz

      - name: Update spec file with version
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Extract spec file from source tarball
          tar -xzf ~/rpmbuild/SOURCES/sysmanage-agent-$VERSION.tar.gz -C /tmp \
            sysmanage-agent-$VERSION/installer/opensuse/sysmanage-agent.spec
          cp /tmp/sysmanage-agent-$VERSION/installer/opensuse/sysmanage-agent.spec ~/rpmbuild/SPECS/

          DATE=$(date "+%a %b %d %Y")

          # Update version and changelog date
          sed -i "s/^Version:.*/Version:        $VERSION/" ~/rpmbuild/SPECS/sysmanage-agent.spec
          sed -i "s/^\\* Mon Oct 14 2024/\\* $DATE/" ~/rpmbuild/SPECS/sysmanage-agent.spec

          echo "Spec file updated to version $VERSION"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build RPM package
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Use --nodeps to skip dependency checking since we're building on Ubuntu
          rpmbuild -bb --nodeps ~/rpmbuild/SPECS/sysmanage-agent.spec

          # Find the built RPM
          RPM_FILE=$(find ~/rpmbuild/RPMS -name "sysmanage-agent-$VERSION-*.rpm" | head -1)

          if [ -z "$RPM_FILE" ]; then
            echo "ERROR: RPM package not found!"
            exit 1
          fi

          # Copy to workspace
          cp "$RPM_FILE" "$GITHUB_WORKSPACE/"

          echo "RPM package built: $(basename $RPM_FILE)"

      - name: Generate package information
        id: package_info
        env:
          TARGET: ${{ matrix.target }}
        run: |
          RPM_FILE=$(ls sysmanage-agent-*.rpm | head -1)
          echo "rpm_file=$RPM_FILE" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT

          # Get package info
          rpm -qip "$RPM_FILE"
          rpm -qlp "$RPM_FILE"

          # Generate SHA256 checksum
          sha256sum "$RPM_FILE" > "$RPM_FILE.sha256"

          echo "Package built: $RPM_FILE"
          echo "Target: $TARGET"
          echo "Size: $(du -h "$RPM_FILE" | cut -f1)"

      - name: Upload .rpm as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-rpm-${{ matrix.target }}
          path: |
            sysmanage-agent*.rpm
            sysmanage-agent*.rpm.sha256

  # macOS .pkg Package Build
  build-macos:
    name: Build macOS .pkg Package
    runs-on: macos-latest
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install build dependencies
        run: |
          # Xcode Command Line Tools should already be available on GitHub runners
          # Verify pkgbuild and productbuild are available
          which pkgbuild
          which productbuild
          echo "âœ“ macOS packaging tools available"

      - name: Update version in Makefile
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Update version in Makefile if there's a VERSION variable
          if grep -q "^VERSION.*=" Makefile; then
            sed -i '' "s/^VERSION.*=.*/VERSION = $VERSION/" Makefile
          fi

      - name: Build macOS .pkg installer
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Build the installer using the Makefile
          make installer

          # Verify the package was created
          PKG_FILE="installer/dist/sysmanage-agent-${VERSION}-macos.pkg"
          if [ ! -f "$PKG_FILE" ]; then
            echo "Error: Package file not found at $PKG_FILE"
            ls -la installer/dist/
            exit 1
          fi

          echo "Package built successfully: $PKG_FILE"

      - name: Verify package structure
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          PKG_FILE="installer/dist/sysmanage-agent-${VERSION}-macos.pkg"

          echo "Package information:"
          pkgutil --payload-files "$PKG_FILE" | head -20

          echo ""
          echo "Package size: $(du -h "$PKG_FILE" | cut -f1)"

      - name: Generate package information
        id: package_info
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          PKG_FILE="installer/dist/sysmanage-agent-${VERSION}-macos.pkg"
          echo "pkg_file=sysmanage-agent-${VERSION}-macos.pkg" >> $GITHUB_OUTPUT

          # Generate SHA256 checksum
          shasum -a 256 "$PKG_FILE" > "$PKG_FILE.sha256"

          echo "Package built: $PKG_FILE"
          echo "Size: $(du -h "$PKG_FILE" | cut -f1)"
          echo "SHA256: $(cat "$PKG_FILE.sha256")"

      - name: Upload .pkg as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-macos-pkg
          path: |
            installer/dist/sysmanage-agent-*.pkg
            installer/dist/sysmanage-agent-*.pkg.sha256

  # Windows .msi Package Build (x64 and ARM64)
  build-windows:
    name: Build Windows MSI (${{ matrix.arch }})
    runs-on: windows-latest
    needs: wait-for-tests
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        shell: pwsh
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if ($env:EVENT_NAME -eq "workflow_dispatch") {
            # Strip 'v' prefix if present in manual input
            $VERSION = $env:INPUT_VERSION -replace '^v', ''
          } else {
            # Extract version from tag (remove 'v' prefix and refs/tags/)
            $VERSION = $env:REF -replace '^refs/tags/v', ''
          }

          Write-Host "Building version: $VERSION"
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Generate requirements-prod.txt
        shell: pwsh
        run: |
          Write-Host "Generating requirements-prod.txt from requirements.txt..."
          python scripts/update-requirements-prod.py

      - name: Install SBOM generation tools
        shell: pwsh
        run: |
          Write-Host "Installing cyclonedx-bom for Python..."
          python -m pip install cyclonedx-bom
          python -c "import cyclonedx_py; print('âœ“ cyclonedx-bom installed')"

      - name: Generate SBOM
        shell: pwsh
        run: |
          Write-Host "Generating Software Bill of Materials..."
          # Create sbom directory
          New-Item -ItemType Directory -Force -Path sbom | Out-Null
          # Generate SBOM
          cyclonedx-py requirements -r -i requirements-prod.txt -o sbom/sysmanage-agent-sbom.json --format json
          Write-Host "âœ“ SBOM generated"

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          Write-Host "Installing WiX Toolset v5..."

          # Install WiX using dotnet tool
          dotnet tool install --global wix --version 5.0.2

          # Add dotnet tools to PATH for this session
          $dotnetToolsPath = Join-Path $env:USERPROFILE ".dotnet\tools"
          $env:PATH = "$dotnetToolsPath;$env:PATH"

          # Verify installation
          wix --version

          Write-Host "WiX Toolset installed successfully"

      - name: Build Windows MSI installer
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $arch = "${{ matrix.arch }}"

          Write-Host "Building Windows MSI installer for $arch..."
          Write-Host "Version: $version"

          # Ensure dotnet tools are in PATH
          $dotnetToolsPath = Join-Path $env:USERPROFILE ".dotnet\tools"
          $env:PATH = "$dotnetToolsPath;$env:PATH"

          # Set VERSION as environment variable
          $env:VERSION = $version

          # Run the build script
          .\installer\windows\build-msi.ps1 -Architecture $arch

          Write-Host "Build completed successfully"

      - name: Verify MSI package
        shell: pwsh
        env:
          VERSION: ${{ steps.version.outputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          $msiFile = "installer\dist\sysmanage-agent-$env:VERSION-windows-$env:ARCH.msi"

          if (-not (Test-Path $msiFile)) {
            Write-Host "ERROR: MSI file not found at $msiFile"
            Get-ChildItem installer\dist -ErrorAction SilentlyContinue
            exit 1
          }

          Write-Host "MSI package built successfully:"
          Write-Host "  File: $msiFile"
          Write-Host "  Size: $((Get-Item $msiFile).Length / 1MB | ForEach-Object { '{0:N2}' -f $_ }) MB"

      - name: Generate SHA256 checksum
        shell: pwsh
        env:
          VERSION: ${{ steps.version.outputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          $msiFile = "installer\dist\sysmanage-agent-$env:VERSION-windows-$env:ARCH.msi"
          $checksumFile = "$msiFile.sha256"

          $hash = (Get-FileHash -Path $msiFile -Algorithm SHA256).Hash.ToLower()
          $filename = Split-Path $msiFile -Leaf
          "$hash  $filename" | Out-File -FilePath $checksumFile -Encoding ascii

          Write-Host "SHA256 checksum generated:"
          Get-Content $checksumFile

      - name: Upload MSI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-windows-${{ matrix.arch }}-msi
          path: |
            installer/dist/sysmanage-agent-*.msi
            installer/dist/sysmanage-agent-*.msi.sha256

  # FreeBSD .pkg Package Build
  build-freebsd:
    name: Build FreeBSD .pkg Package
    runs-on: ubuntu-latest
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install FreeBSD package build tools
        run: |
          sudo apt-get update
          # Try to install FreeBSD pkg tools or alternatives
          # We may need to install libarchive-tools for tar/archive handling
          sudo apt-get install -y \
            libarchive-tools \
            python3-dev \
            python3-pip \
            python3-setuptools \
            build-essential \
            pkg-config \
            gzip \
            tar \
            xz-utils

      - name: Set up FreeBSD package structure
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Setting up FreeBSD package structure..."

          # Create build directories
          mkdir -p build/freebsd/package-root/usr/local/lib/sysmanage-agent
          mkdir -p build/freebsd/package-root/usr/local/etc/sysmanage-agent
          mkdir -p build/freebsd/package-root/usr/local/etc/rc.d
          mkdir -p build/freebsd/package-root/var/log/sysmanage-agent
          mkdir -p build/freebsd/package-root/var/run/sysmanage

          # Copy agent files
          cp -R src build/freebsd/package-root/usr/local/lib/sysmanage-agent/
          cp main.py build/freebsd/package-root/usr/local/lib/sysmanage-agent/
          cp requirements.txt build/freebsd/package-root/usr/local/lib/sysmanage-agent/
          cp alembic.ini build/freebsd/package-root/usr/local/lib/sysmanage-agent/

          # Copy configuration files
          cp installer/freebsd/config.yaml.example build/freebsd/package-root/usr/local/etc/sysmanage-agent/
          cp installer/freebsd/sysmanage-agent.rc build/freebsd/package-root/usr/local/etc/rc.d/sysmanage_agent
          cp installer/freebsd/sysmanage-agent-wrapper.sh build/freebsd/package-root/usr/local/lib/sysmanage-agent/

          # Set executable permissions
          chmod +x build/freebsd/package-root/usr/local/etc/rc.d/sysmanage_agent
          chmod +x build/freebsd/package-root/usr/local/lib/sysmanage-agent/sysmanage-agent-wrapper.sh

          # Update manifest with version
          sed "s/version: \".*\"/version: \"$VERSION\"/" installer/freebsd/+MANIFEST > build/freebsd/+MANIFEST

      - name: Create FreeBSD package using libarchive
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating FreeBSD package..."
          cd build/freebsd

          # Create the package archive
          # FreeBSD packages are typically txz (tar.xz) files with specific structure
          # First create the manifest and metadata

          # Create package metadata files
          echo "+COMPACT_MANIFEST" > +COMPACT_MANIFEST

          # Create the package contents
          cd package-root
          find . -type f | sort > ../+CONTENTS

          # Create the final package file
          cd ..
          PKG_FILE="sysmanage-agent-$VERSION.pkg"

          # Create package archive (FreeBSD packages are .txz files)
          tar -cf - +COMPACT_MANIFEST +MANIFEST +CONTENTS package-root | xz -c > "../$PKG_FILE"

          # Move to dist directory
          mkdir -p ../../installer/dist
          mv "../$PKG_FILE" ../../installer/dist/

          echo "Package created: installer/dist/$PKG_FILE"

      - name: Generate package information
        id: package_info
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          PKG_FILE="sysmanage-agent-$VERSION.pkg"
          echo "pkg_file=$PKG_FILE" >> $GITHUB_OUTPUT

          # Generate SHA256 checksum
          cd installer/dist
          sha256sum "$PKG_FILE" > "$PKG_FILE.sha256"

          echo "Package built: $PKG_FILE"
          echo "Size: $(du -h "$PKG_FILE" | cut -f1)"

          # Show package contents
          echo "Package contents:"
          tar -tf "$PKG_FILE" | head -20

      - name: Upload .pkg as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-freebsd-pkg
          path: |
            installer/dist/sysmanage-agent-*.pkg
            installer/dist/sysmanage-agent-*.pkg.sha256

  # NetBSD .tgz Package Build
  build-netbsd:
    name: Build NetBSD .tgz Package
    runs-on: ubuntu-latest
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Set up NetBSD package structure
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Setting up NetBSD package structure..."

          # Create build directories
          BUILD_DIR="build/netbsd"
          PACKAGE_ROOT="$BUILD_DIR/package-root"

          mkdir -p "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent"
          mkdir -p "$PACKAGE_ROOT/usr/pkg/etc/sysmanage-agent"
          mkdir -p "$PACKAGE_ROOT/usr/pkg/share/examples/rc.d"
          mkdir -p "$PACKAGE_ROOT/var/log/sysmanage-agent"
          mkdir -p "$PACKAGE_ROOT/var/run/sysmanage"

          echo "âœ“ Package directories created"

          # Copy agent files
          echo "Copying agent files..."
          cp -R src "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/"
          cp main.py "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/"
          cp requirements.txt "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/"
          cp alembic.ini "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/"
          echo "âœ“ Agent files copied"

          # Copy configuration files
          echo "Copying configuration files..."
          cp installer/netbsd/config.yaml.example "$PACKAGE_ROOT/usr/pkg/etc/sysmanage-agent/"
          cp installer/netbsd/sysmanage_agent.rc "$PACKAGE_ROOT/usr/pkg/share/examples/rc.d/sysmanage_agent"
          cp installer/netbsd/sysmanage-agent-wrapper.sh "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/"
          chmod +x "$PACKAGE_ROOT/usr/pkg/share/examples/rc.d/sysmanage_agent"
          chmod +x "$PACKAGE_ROOT/usr/pkg/lib/sysmanage-agent/sysmanage-agent-wrapper.sh"
          echo "âœ“ Configuration files copied"

          # Copy package metadata files
          echo "Copying package metadata files..."
          cp installer/netbsd/+INSTALL "$BUILD_DIR/"
          cp installer/netbsd/+DESC "$BUILD_DIR/"
          cp installer/netbsd/+COMMENT "$BUILD_DIR/"
          cp installer/netbsd/+BUILD_INFO "$BUILD_DIR/"
          chmod +x "$BUILD_DIR/+INSTALL"
          echo "âœ“ Metadata files copied"

      - name: Create packing list with dependencies
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating packing list with dependencies..."
          BUILD_DIR="build/netbsd"
          PACKAGE_ROOT="$BUILD_DIR/package-root"

          {
            echo "@name sysmanage-agent-$VERSION"
            echo "@comment SysManage Agent - System management agent for NetBSD"
            echo "@pkgdep python312>=3.12"
            echo "@pkgdep py312-websockets>=15.0"
            echo "@pkgdep py312-yaml>=6.0"
            echo "@pkgdep py312-aiohttp>=3.12"
            echo "@pkgdep py312-cryptography>=45.0"
            echo "@pkgdep py312-sqlalchemy>=2.0"
            echo "@pkgdep py312-alembic>=1.16"
            cd "$PACKAGE_ROOT" && find . -type f -o -type l | sed 's,^\./,,'
            cd "$PACKAGE_ROOT" && find . -type d | sed 's,^\./,,' | grep -v '^\.' | sed 's,^,@dirrm ,'
          } | sort -u > "$BUILD_DIR/+CONTENTS"

          echo "âœ“ Packing list created with dependencies"

      - name: Create NetBSD package archive
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating NetBSD package archive..."
          BUILD_DIR="build/netbsd"
          PACKAGE_ROOT="$BUILD_DIR/package-root"

          cd "$BUILD_DIR"

          # Create the package archive with all metadata and files
          tar czf "sysmanage-agent-$VERSION.tgz" \
            +BUILD_INFO \
            +COMMENT \
            +DESC \
            +INSTALL \
            +CONTENTS \
            -C package-root .

          if [ $? -eq 0 ]; then
            echo "âœ“ Package created successfully"
            ls -lh "sysmanage-agent-$VERSION.tgz"
          else
            echo "ERROR: Package creation failed"
            exit 1
          fi

      - name: Move package to dist directory
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Moving package to dist directory..."
          mkdir -p installer/dist
          mv "build/netbsd/sysmanage-agent-$VERSION.tgz" "installer/dist/"
          echo "âœ“ Package moved to installer/dist/"

      - name: Generate package information
        id: package_info
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          PKG_FILE="sysmanage-agent-$VERSION.tgz"
          echo "pkg_file=$PKG_FILE" >> $GITHUB_OUTPUT

          # Generate SHA256 checksum
          cd installer/dist
          sha256sum "$PKG_FILE" > "$PKG_FILE.sha256"

          echo ""
          echo "âœ“ NetBSD package created successfully: installer/dist/$PKG_FILE"
          echo ""
          echo "Package details:"
          ls -lh "$PKG_FILE"
          echo ""
          echo "SHA256:"
          cat "$PKG_FILE.sha256"

      - name: Upload .tgz as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-netbsd-tgz
          path: |
            installer/dist/sysmanage-agent-*.tgz
            installer/dist/sysmanage-agent-*.tgz.sha256

  # OpenBSD Port Tarball Build
  build-openbsd:
    name: Build OpenBSD Port Tarball
    runs-on: ubuntu-latest
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Strip 'v' prefix if present in manual input
            VERSION="${INPUT_VERSION#v}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building OpenBSD port for version: $VERSION"

      - name: Create port directory structure
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating OpenBSD port structure..."
          mkdir -p openbsd-port

          # Copy port infrastructure files
          cp -r installer/openbsd/pkg openbsd-port/
          cp -r installer/openbsd/files openbsd-port/
          cp installer/openbsd/Makefile openbsd-port/
          cp installer/openbsd/distinfo openbsd-port/
          cp installer/openbsd/README.md openbsd-port/
          cp installer/openbsd/SUBMISSION.md openbsd-port/

          # Update version in Makefile
          sed -i "s/^GH_TAGNAME =.*/GH_TAGNAME =\t\tv$VERSION/" openbsd-port/Makefile

          echo "âœ“ Port directory structure created"

      - name: Create INSTALL.md with quick start instructions
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          cat > openbsd-port/INSTALL.md << 'EOF'
          # SysManage Agent - OpenBSD Port Installation

          This package contains the OpenBSD port infrastructure for sysmanage-agent.

          ## Quick Start Installation

          ### Step 1: Extract to Ports Tree

          ```bash
          # Extract the port files to the OpenBSD ports tree
          doas tar xzf sysmanage-agent-${{ steps.version.outputs.version }}-openbsd-port.tar.gz \
              -C /usr/ports/sysutils/

          # Rename to expected directory name
          doas mv /usr/ports/sysutils/sysmanage-agent /usr/ports/sysutils/sysmanage-agent.old 2>/dev/null || true
          doas mv /usr/ports/sysutils/openbsd-port /usr/ports/sysutils/sysmanage-agent

          # Or if you prefer, extract directly:
          cd /usr/ports/sysutils/
          doas rm -rf sysmanage-agent
          doas tar xzf ~/sysmanage-agent-${{ steps.version.outputs.version }}-openbsd-port.tar.gz
          doas mv openbsd-port sysmanage-agent
          ```

          ### Step 2: Build and Install

          ```bash
          # Navigate to the port directory
          cd /usr/ports/sysutils/sysmanage-agent

          # Install Python dependencies (avoid gcc conflicts)
          doas pkg_add py3-websockets py3-yaml py3-aiohttp py3-cryptography \
              py3-sqlalchemy py3-alembic

          # Generate checksums for the source tarball
          doas make makesum

          # Build and install the port
          doas make install

          # Verify installation
          ls -la /usr/local/libexec/sysmanage-agent/
          ```

          ### Step 3: Configure and Start

          ```bash
          # Copy example configuration
          doas cp /usr/local/share/examples/sysmanage-agent/sysmanage-agent.yaml \
              /etc/sysmanage-agent.yaml

          # Edit configuration with your server details
          doas vi /etc/sysmanage-agent.yaml

          # Enable and start the service
          doas rcctl enable sysmanage_agent
          doas rcctl start sysmanage_agent

          # Check service status
          doas rcctl check sysmanage_agent
          doas rcctl status sysmanage_agent

          # View logs
          doas tail -f /var/log/sysmanage-agent/sysmanage-agent.log
          ```

          ## Configuration

          The configuration file is located at `/etc/sysmanage-agent.yaml`.

          Required settings:
          - `server.url`: WebSocket URL of your SysManage server
          - `server.token`: Authentication token from your SysManage server

          Database path (OpenBSD convention):
          - `/var/db/sysmanage-agent/agent.db`

          ## Service Management

          ```bash
          # Start service
          doas rcctl start sysmanage_agent

          # Stop service
          doas rcctl stop sysmanage_agent

          # Restart service
          doas rcctl restart sysmanage_agent

          # Check if running
          doas rcctl check sysmanage_agent

          # Enable on boot
          doas rcctl enable sysmanage_agent

          # Disable on boot
          doas rcctl disable sysmanage_agent
          ```

          ## Troubleshooting

          ### Service won't start

          Check the rc.d script and logs:

          ```bash
          # View rc.d script
          cat /etc/rc.d/sysmanage_agent

          # Test manually
          doas /usr/local/bin/python3 /usr/local/libexec/sysmanage-agent/main.py

          # Check permissions
          ls -la /var/db/sysmanage-agent/
          ls -la /var/log/sysmanage-agent/
          ```

          ### Check installation

          ```bash
          # Verify installed files
          pkg_info -L sysmanage-agent

          # Check Python modules
          /usr/local/bin/python3 -c "import websockets, yaml, aiohttp"
          ```

          ## Uninstallation

          ```bash
          # Stop and disable service
          doas rcctl stop sysmanage_agent
          doas rcctl disable sysmanage_agent

          # Uninstall the port
          cd /usr/ports/sysutils/sysmanage-agent
          doas make uninstall

          # Remove configuration and data (optional)
          doas rm -f /etc/sysmanage-agent.yaml
          doas rm -rf /var/db/sysmanage-agent/
          doas rm -rf /var/log/sysmanage-agent/
          ```

          ## Documentation

          - **Full Documentation**: See README.md in this package
          - **Submission Guide**: See SUBMISSION.md for official ports tree submission
          - **OpenBSD Porter's Handbook**: https://www.openbsd.org/faq/ports/

          ## Support

          - **GitHub Issues**: https://github.com/bceverly/sysmanage-agent/issues
          - **OpenBSD Ports**: ports@openbsd.org

          ---

          **Version:** ${{ steps.version.outputs.version }}
          **Platform:** OpenBSD 7.4+
          **Architecture:** amd64 (primary), others may work
          EOF

      - name: Create tarball
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Creating port tarball..."

          # Create the tarball
          tar czf "sysmanage-agent-${VERSION}-openbsd-port.tar.gz" \
              -C openbsd-port \
              .

          echo "âœ“ Tarball created: sysmanage-agent-${VERSION}-openbsd-port.tar.gz"

          # Show tarball contents
          echo ""
          echo "Tarball contents:"
          tar tzf "sysmanage-agent-${VERSION}-openbsd-port.tar.gz" | head -20

          # Show size
          ls -lh "sysmanage-agent-${VERSION}-openbsd-port.tar.gz"

      - name: Generate SHA256 checksum
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Generating SHA256 checksum..."
          sha256sum "sysmanage-agent-${VERSION}-openbsd-port.tar.gz" > \
              "sysmanage-agent-${VERSION}-openbsd-port.tar.gz.sha256"

          cat "sysmanage-agent-${VERSION}-openbsd-port.tar.gz.sha256"

      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-openbsd-port
          path: |
            sysmanage-agent-${{ steps.version.outputs.version }}-openbsd-port.tar.gz
            sysmanage-agent-${{ steps.version.outputs.version }}-openbsd-port.tar.gz.sha256

  # Flatpak Package Build
  build-flatpak:
    name: Build Flatpak Package
    runs-on: ubuntu-22.04
    needs: wait-for-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            VERSION="${INPUT_VERSION#v}"
          else
            VERSION="${REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building Flatpak for version: $VERSION"

      - name: Install Flatpak build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install --user -y flathub org.freedesktop.Platform//24.08
          flatpak install --user -y flathub org.freedesktop.Sdk//24.08

      - name: Set version in VERSION file
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "$VERSION" > VERSION

      - name: Prepare Flatpak build
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Create source tarball
          tar czf installer/flatpak/sysmanage-agent-src.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.venv' \
            --exclude='htmlcov' \
            --exclude='.coverage' \
            --exclude='installer/dist' \
            main.py src/ alembic.ini requirements.txt README.md VERSION

          # Filter runtime requirements
          grep -v "^semgrep\|^bandit\|^black\|^pylint\|^pytest\|^coverage\|^safety\|^playwright\|^selenium\|^webdriver-manager" requirements.txt > installer/flatpak/requirements-runtime.txt

          # Download Python dependencies
          mkdir -p installer/flatpak/pypi-dependencies
          pip3 download -r installer/flatpak/requirements-runtime.txt -d installer/flatpak/pypi-dependencies --platform manylinux2014_x86_64 --only-binary=:all: --python-version=312 2>/dev/null || \
          pip3 download -r installer/flatpak/requirements-runtime.txt -d installer/flatpak/pypi-dependencies --platform manylinux_2_17_x86_64 --only-binary=:all: --python-version=312

          cd installer/flatpak/pypi-dependencies && tar czf ../pypi-dependencies.tar.gz .

          # Update metainfo with version (if file exists)
          if [ -f installer/flatpak/org.sysmanage.Agent.metainfo.xml ]; then
            sed -i "s/VERSION_PLACEHOLDER/$VERSION/" installer/flatpak/org.sysmanage.Agent.metainfo.xml
          else
            echo "Metainfo file not found, skipping version update"
          fi

      - name: Build Flatpak
        run: |
          cd installer/flatpak
          # Remove metainfo install line to avoid appstream-compose requirement
          sed -i '/install.*org.sysmanage.Agent.metainfo.xml.*\/app\/share\/metainfo/d' org.sysmanage.Agent.yaml
          flatpak-builder --force-clean --repo=repo builddir org.sysmanage.Agent.yaml

      - name: Create Flatpak bundle
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          cd installer/flatpak
          flatpak build-bundle repo sysmanage-agent-$VERSION.flatpak org.sysmanage.Agent

          # Generate SHA256 checksum
          sha256sum sysmanage-agent-$VERSION.flatpak > sysmanage-agent-$VERSION.flatpak.sha256

          echo "âœ“ Flatpak bundle created:"
          ls -lh sysmanage-agent-$VERSION.flatpak

      - name: Upload Flatpak as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-flatpak
          path: |
            installer/flatpak/sysmanage-agent-${{ steps.version.outputs.version }}.flatpak
            installer/flatpak/sysmanage-agent-${{ steps.version.outputs.version }}.flatpak.sha256
            installer/flatpak/repo/**

  # Consolidated Release - Push to sysmanage-docs and create GitHub release
  release:
    name: Create Release and Push to Docs
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-centos, build-opensuse, build-macos, build-windows, build-freebsd, build-netbsd, build-openbsd, build-flatpak]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Determine version
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building consolidated release for version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize artifacts
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Organizing artifacts for release..."
          mkdir -p release-files

          # Copy all package files to release directory
          find artifacts/ -name "*.deb" -exec cp {} release-files/ \;
          find artifacts/ -name "*.rpm" -exec cp {} release-files/ \;
          find artifacts/ -name "*.pkg" -exec cp {} release-files/ \;
          find artifacts/ -name "*.msi" -exec cp {} release-files/ \;
          find artifacts/ -name "*.tgz" -exec cp {} release-files/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} release-files/ \;
          find artifacts/ -name "*.flatpak" -exec cp {} release-files/ \;
          find artifacts/ -name "*.sha256" -exec cp {} release-files/ \;
          find artifacts/ -name "*.json" -exec cp {} release-files/ \;

          echo "Release files:"
          ls -la release-files/

      - name: Push packages to sysmanage-docs repository
        env:
          VERSION: ${{ steps.version.outputs.version }}
          DOCS_REPO_TOKEN: ${{ secrets.DOCS_REPO_TOKEN }}
        run: |
          echo "Cloning sysmanage-docs repository..."
          git clone https://x-access-token:${DOCS_REPO_TOKEN}@github.com/bceverly/sysmanage-docs.git /tmp/sysmanage-docs

          cd /tmp/sysmanage-docs
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Create version directories for each platform
          mkdir -p "repo/agent/deb/pool/main/$VERSION-1"
          mkdir -p "repo/agent/rpm/el9/x86_64"
          mkdir -p "repo/agent/rpm/opensuse-tumbleweed/x86_64"
          mkdir -p "repo/agent/rpm/opensuse-leap/15/x86_64"
          mkdir -p "repo/agent/rpm/sles/15/x86_64"
          mkdir -p "repo/agent/mac/packages/$VERSION"
          mkdir -p "repo/agent/windows/packages/$VERSION"
          mkdir -p "repo/agent/freebsd/packages/$VERSION"
          mkdir -p "repo/agent/netbsd/packages/$VERSION"
          mkdir -p "repo/agent/openbsd/ports/$VERSION"

          # Copy package files to appropriate locations
          # DEB packages
          cp ${{ github.workspace }}/release-files/sysmanage-agent_*.deb "repo/agent/deb/pool/main/$VERSION-1/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/sysmanage-agent_*.deb.sha256 "repo/agent/deb/pool/main/$VERSION-1/" 2>/dev/null || true

          # RPM packages - CentOS/RHEL (from build-centos job)
          # The artifact is named "sysmanage-agent-rpm" and contains files like sysmanage-agent-VERSION-1.x86_64.rpm
          find ${{ github.workspace }}/artifacts/sysmanage-agent-rpm -name "sysmanage-agent-*.rpm" -exec cp {} "repo/agent/rpm/el9/x86_64/" \; 2>/dev/null || true
          find ${{ github.workspace }}/artifacts/sysmanage-agent-rpm -name "sysmanage-agent-*.rpm.sha256" -exec cp {} "repo/agent/rpm/el9/x86_64/" \; 2>/dev/null || true

          # RPM packages - OpenSUSE Tumbleweed
          cp ${{ github.workspace }}/release-files/*opensuse-tumbleweed*.rpm "repo/agent/rpm/opensuse-tumbleweed/x86_64/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*opensuse-tumbleweed*.rpm.sha256 "repo/agent/rpm/opensuse-tumbleweed/x86_64/" 2>/dev/null || true

          # RPM packages - OpenSUSE Leap
          cp ${{ github.workspace }}/release-files/*opensuse-leap*.rpm "repo/agent/rpm/opensuse-leap/15/x86_64/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*opensuse-leap*.rpm.sha256 "repo/agent/rpm/opensuse-leap/15/x86_64/" 2>/dev/null || true

          # RPM packages - SLES
          cp ${{ github.workspace }}/release-files/*sles*.rpm "repo/agent/rpm/sles/15/x86_64/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*sles*.rpm.sha256 "repo/agent/rpm/sles/15/x86_64/" 2>/dev/null || true

          # macOS packages
          cp ${{ github.workspace }}/release-files/*macos*.pkg "repo/agent/mac/packages/$VERSION/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*macos*.pkg.sha256 "repo/agent/mac/packages/$VERSION/" 2>/dev/null || true

          # Windows packages
          cp ${{ github.workspace }}/release-files/*windows*.msi "repo/agent/windows/packages/$VERSION/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*windows*.msi.sha256 "repo/agent/windows/packages/$VERSION/" 2>/dev/null || true

          # FreeBSD packages
          cp ${{ github.workspace }}/release-files/sysmanage-agent-$VERSION.pkg "repo/agent/freebsd/packages/$VERSION/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/sysmanage-agent-$VERSION.pkg.sha256 "repo/agent/freebsd/packages/$VERSION/" 2>/dev/null || true

          # NetBSD packages
          cp ${{ github.workspace }}/release-files/sysmanage-agent-$VERSION.tgz "repo/agent/netbsd/packages/$VERSION/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/sysmanage-agent-$VERSION.tgz.sha256 "repo/agent/netbsd/packages/$VERSION/" 2>/dev/null || true

          # OpenBSD port tarball
          cp ${{ github.workspace }}/release-files/*openbsd-port.tar.gz "repo/agent/openbsd/ports/$VERSION/" 2>/dev/null || true
          cp ${{ github.workspace }}/release-files/*openbsd-port.tar.gz.sha256 "repo/agent/openbsd/ports/$VERSION/" 2>/dev/null || true

          # Flatpak package and repository
          echo "Copying Flatpak files..."
          cp ${{ github.workspace }}/artifacts/sysmanage-agent-flatpak/installer/flatpak/sysmanage-agent-*.flatpak "repo/flatpak/" 2>/dev/null || true
          cp ${{ github.workspace }}/artifacts/sysmanage-agent-flatpak/installer/flatpak/sysmanage-agent-*.flatpak.sha256 "repo/flatpak/" 2>/dev/null || true

          # Copy Flatpak repository data
          echo "Syncing Flatpak repository..."
          rsync -av ${{ github.workspace }}/artifacts/sysmanage-agent-flatpak/installer/flatpak/repo/ repo/ 2>/dev/null || true

          # Install repository tools
          echo "Installing repository metadata tools..."
          sudo apt-get update && sudo apt-get install -y dpkg-dev createrepo-c

          # Regenerate apt repository metadata
          echo "Regenerating apt repository metadata..."
          cd repo/agent/deb

          # Generate Packages files
          dpkg-scanpackages pool/ /dev/null > dists/stable/main/binary-amd64/Packages
          gzip -9c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz

          # Generate Release file with checksums
          cd dists/stable
          {
            echo "Date: $(date -R -u)"
            echo "MD5Sum:"
            md5sum main/binary-amd64/Packages | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            md5sum main/binary-amd64/Packages.gz | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            echo "SHA1:"
            sha1sum main/binary-amd64/Packages | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            sha1sum main/binary-amd64/Packages.gz | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            echo "SHA256:"
            sha256sum main/binary-amd64/Packages | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            sha256sum main/binary-amd64/Packages.gz | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            echo "SHA512:"
            sha512sum main/binary-amd64/Packages | awk '{printf " %s %16d %s\n", $1, 0, $2}'
            sha512sum main/binary-amd64/Packages.gz | awk '{printf " %s %16d %s\n", $1, 0, $2}'
          } > Release.tmp

          # Add file sizes to Release file
          SIZE_PACKAGES=$(stat -c%s main/binary-amd64/Packages)
          SIZE_PACKAGES_GZ=$(stat -c%s main/binary-amd64/Packages.gz)
          sed -i "s/ 0 main\/binary-amd64\/Packages$/ $SIZE_PACKAGES main\/binary-amd64\/Packages/" Release.tmp
          sed -i "s/ 0 main\/binary-amd64\/Packages.gz$/ $SIZE_PACKAGES_GZ main\/binary-amd64\/Packages.gz/" Release.tmp
          mv Release.tmp Release

          cd /tmp/sysmanage-docs

          # Regenerate RPM repository metadata
          echo "Regenerating RPM repository metadata..."
          echo "Current directory: $(pwd)"
          echo "Checking for RPM repositories..."

          # Regenerate metadata for each RPM repository
          for rpm_repo in repo/agent/rpm/el9/x86_64 repo/agent/rpm/opensuse-tumbleweed/x86_64 repo/agent/rpm/opensuse-leap/15/x86_64 repo/agent/rpm/sles/15/x86_64; do
            echo "Checking $rpm_repo..."
            if [ -d "$rpm_repo" ]; then
              echo "  Directory exists"
              if [ -n "$(ls -A $rpm_repo/*.rpm 2>/dev/null)" ]; then
                echo "  RPM files found, regenerating metadata for $rpm_repo"
                createrepo_c --update "$rpm_repo"
              else
                echo "  No RPM files found in $rpm_repo"
              fi
            else
              echo "  Directory $rpm_repo does not exist"
            fi
          done

          # Commit and push changes
          git add .
          git commit -m "Add all platform packages for v$VERSION" || echo "No changes to commit"
          git push origin main

      - name: Generate consolidated release notes
        id: release_notes
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Get tag annotation message if it exists
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }} | sed '/^$/d')

          cat > release_notes.md << EOF
          # SysManage Agent v$VERSION

          ${TAG_MESSAGE:+$TAG_MESSAGE}
          ${TAG_MESSAGE:+}
          Multi-platform system management agent with support for Linux, BSD, macOS, and Windows.

          ## Installation Instructions

          ### Ubuntu/Debian
          \`\`\`bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent_${VERSION}-1_amd64.deb
          sudo apt install ./sysmanage-agent_${VERSION}-1_amd64.deb

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo systemctl enable --now sysmanage-agent
          \`\`\`

          ### Flatpak (Universal Linux)
          \`\`\`bash
          # Add SysManage repository
          flatpak remote-add --if-not-exists sysmanage https://sysmanage.org/sysmanage.flatpakrepo

          # Install the agent
          flatpak install sysmanage org.sysmanage.Agent

          # Run service installation script
          flatpak run --command=sysmanage-service-install org.sysmanage.Agent

          # Or download and install the bundle directly:
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}.flatpak
          flatpak install --user sysmanage-agent-${VERSION}.flatpak
          \`\`\`

          ### CentOS/RHEL 9
          \`\`\`bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-1.el9.x86_64.rpm
          sudo dnf install ./sysmanage-agent-${VERSION}-1.el9.x86_64.rpm

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo systemctl enable --now sysmanage-agent
          \`\`\`

          ### OpenSUSE Tumbleweed
          \`\`\`bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-1.opensuse.tumbleweed.x86_64.rpm
          sudo zypper install ./sysmanage-agent-${VERSION}-1.opensuse.tumbleweed.x86_64.rpm

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo systemctl enable --now sysmanage-agent
          \`\`\`

          ### OpenSUSE Leap 15
          \`\`\`bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-1.opensuse.leap.15.x86_64.rpm
          sudo zypper install ./sysmanage-agent-${VERSION}-1.opensuse.leap.15.x86_64.rpm

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo systemctl enable --now sysmanage-agent
          \`\`\`

          ### SUSE Linux Enterprise Server (SLES) 15
          \`\`\`bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-1.sles.x86_64.rpm
          sudo zypper install ./sysmanage-agent-${VERSION}-1.sles.x86_64.rpm

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo systemctl enable --now sysmanage-agent
          \`\`\`

          ### macOS
          \`\`\`bash
          # Download and install
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-macos.pkg
          sudo installer -pkg sysmanage-agent-${VERSION}-macos.pkg -target /

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo launchctl load /Library/LaunchDaemons/com.sysmanage.agent.plist
          \`\`\`

          ### Windows (x64)
          \`\`\`powershell
          # Download and install (PowerShell as Administrator)
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-windows-x64.msi" -OutFile "sysmanage-agent-${VERSION}-windows-x64.msi"
          Start-Process msiexec.exe -ArgumentList "/i sysmanage-agent-${VERSION}-windows-x64.msi /qn" -Wait -Verb RunAs

          # Configure and start
          notepad C:\\ProgramData\\SysManage\\sysmanage-agent.yaml
          Start-Service SysManageAgent
          \`\`\`

          ### Windows (ARM64)
          \`\`\`powershell
          # Download and install (PowerShell as Administrator)
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-windows-arm64.msi" -OutFile "sysmanage-agent-${VERSION}-windows-arm64.msi"
          Start-Process msiexec.exe -ArgumentList "/i sysmanage-agent-${VERSION}-windows-arm64.msi /qn" -Wait -Verb RunAs

          # Configure and start
          notepad C:\\ProgramData\\SysManage\\sysmanage-agent.yaml
          Start-Service SysManageAgent
          \`\`\`

          ### FreeBSD
          \`\`\`bash
          # Download and install
          fetch https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}.pkg
          sudo pkg add sysmanage-agent-${VERSION}.pkg

          # Configure and start
          sudo nano /etc/sysmanage-agent.yaml
          sudo sysrc sysmanage_agent_enable=YES
          sudo service sysmanage_agent start
          \`\`\`

          ### NetBSD
          \`\`\`bash
          # Download and install
          ftp https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}.tgz
          sudo pkg_add sysmanage-agent-${VERSION}.tgz

          # Copy rc.d script and configure
          sudo cp /usr/pkg/share/examples/rc.d/sysmanage_agent /etc/rc.d/
          sudo vi /usr/pkg/etc/sysmanage-agent/config.yaml

          # Enable and start
          sudo sh -c 'echo sysmanage_agent=YES >> /etc/rc.conf'
          sudo /etc/rc.d/sysmanage_agent start
          \`\`\`

          ### OpenBSD
          \`\`\`bash
          # Download the port tarball
          ftp https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-${VERSION}-openbsd-port.tar.gz

          # Extract to ports tree
          cd /usr/ports/sysutils
          doas rm -rf sysmanage-agent
          doas tar xzf ~/sysmanage-agent-${VERSION}-openbsd-port.tar.gz
          doas mv openbsd-port sysmanage-agent

          # Install Python dependencies (avoids gcc conflicts)
          doas pkg_add py3-websockets py3-yaml py3-aiohttp py3-cryptography py3-sqlalchemy py3-alembic

          # Build and install
          cd sysmanage-agent
          doas make makesum
          doas make install

          # Configure and start
          doas cp /usr/local/share/examples/sysmanage-agent/sysmanage-agent.yaml /etc/sysmanage-agent.yaml
          doas vi /etc/sysmanage-agent.yaml
          doas rcctl enable sysmanage_agent
          doas rcctl start sysmanage_agent
          \`\`\`

          ## Checksum Verification

          All packages include SHA256 checksums. Download both files and verify:

          **Linux (Ubuntu/CentOS/OpenSUSE/SLES):**
          \`\`\`bash
          sha256sum -c <package>.sha256
          \`\`\`

          **macOS:**
          \`\`\`bash
          shasum -a 256 -c <package>.sha256
          \`\`\`

          **Windows:**
          \`\`\`powershell
          \$expectedHash = (Get-Content "<package>.sha256").Split()[0]
          \$actualHash = (Get-FileHash "<package>" -Algorithm SHA256).Hash.ToLower()
          if (\$expectedHash -eq \$actualHash) { Write-Host "Checksum verified!" } else { Write-Host "Checksum mismatch!" }
          \`\`\`

          **FreeBSD/NetBSD/OpenBSD:**
          \`\`\`bash
          sha256 -C <package>.sha256 <package>
          \`\`\`

          ## Supported Platforms

          - **Ubuntu**: 22.04 LTS (Jammy), 24.04 LTS (Noble), 24.10 (Oracular), 25.04 (Plucky), 25.10 (Questing)
          - **Debian**: 11 (Bullseye), 12 (Bookworm), 13 (Trixie)
          - **CentOS/RHEL**: 9.x
          - **OpenSUSE**: Tumbleweed, Leap 15.x
          - **SUSE Linux Enterprise Server (SLES)**: 15.x
          - **macOS**: 12+ (Monterey and later)
          - **Windows**: 10 (1809+), 11, Server 2019+ (x64 and ARM64)
          - **FreeBSD**: 13.x, 14.x
          - **NetBSD**: 10.x (tested on 10.1)
          - **OpenBSD**: 7.4+ (tested on 7.7)

          ## Software Bill of Materials (SBOM)

          This release includes a comprehensive Software Bill of Materials (SBOM) file in CycloneDX JSON format for supply chain security and vulnerability analysis:

          **Standalone Download:**
          - **sysmanage-agent-sbom.json** - Complete inventory of Python dependencies

          **Download and inspect:**
          \`\`\`bash
          # Download SBOM file
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/sysmanage-agent-sbom.json

          # View with jq (if installed)
          cat sysmanage-agent-sbom.json | jq .
          \`\`\`

          The SBOM file is compatible with vulnerability scanning tools (Grype, Trivy, Dependency-Track, Snyk, etc.) and provides complete transparency of all software dependencies.

          ## What's Included

          - System management agent service
          - Platform-native service management (systemd/launchd/rc.d)
          - Automatic user/group creation
          - Example configuration files
          - Certificate storage directory
          - Sudoers configuration for system management (Linux only)

          EOF

      - name: Create consolidated GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          body_path: release_notes.md
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Launchpad PPA - Matrix strategy for parallel uploads
  deploy-launchpad:
    name: Deploy to Launchpad PPA (${{ matrix.release_name }})
    runs-on: ubuntu-22.04
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - release: questing
            release_name: "25.10 Questing"
          - release: plucky
            release_name: "25.04 Plucky"
          - release: oracular
            release_name: "24.10 Oracular"
          - release: noble
            release_name: "24.04 Noble"
          - release: jammy
            release_name: "22.04 Jammy"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version $VERSION to Launchpad PPA"

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper dh-python python3-all python3-setuptools dput-ng gnupg

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.LAUNCHPAD_GPG_KEY }}
          GPG_PASSPHRASE: ${{ secrets.LAUNCHPAD_GPG_PASSPHRASE }}
        run: |
          # Check if GPG key secret is set
          if [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "ERROR: LAUNCHPAD_GPG_KEY secret is not set!"
            exit 1
          fi

          # Create GPG directory if it doesn't exist
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Import the GPG key
          echo "Importing GPG key..."
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import 2>&1 || \
            echo "$GPG_PRIVATE_KEY" | base64 -d | gpg --batch --import 2>&1

          # Configure GPG for non-interactive use
          cat >> ~/.gnupg/gpg.conf << EOF
          use-agent
          pinentry-mode loopback
          EOF

          cat >> ~/.gnupg/gpg-agent.conf << EOF
          allow-loopback-pinentry
          allow-preset-passphrase
          EOF

          # Restart GPG agent
          gpg-connect-agent reloadagent /bye

          # List imported keys
          echo "Imported GPG keys:"
          gpg --list-secret-keys --keyid-format LONG

          # Get the key ID for later use
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          echo "Using GPG key: $GPG_KEY_ID"

      - name: Configure dput for Launchpad
        run: |
          mkdir -p ~/.dput.d/profiles
          cat > ~/.dput.d/profiles/launchpad.json << 'EOF'
          {
            "fqdn": "ppa.launchpad.net",
            "incoming": "~bceverly/ubuntu/sysmanage-agent",
            "method": "ftp",
            "allow_unsigned_uploads": false
          }
          EOF

      - name: Build and upload source package
        env:
          VERSION: ${{ steps.version.outputs.version }}
          DEBFULLNAME: "Bryan Everly"
          DEBEMAIL: "bryan@theeverlys.com"
          RELEASE: ${{ matrix.release }}
        run: |
          # Generate requirements-prod.txt from requirements.txt
          echo "Generating requirements-prod.txt..."
          python3 scripts/update-requirements-prod.py

          # Get GPG key ID
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -1)

          echo "=========================================="
          echo "Building source package for Ubuntu $RELEASE (${{ matrix.release_name }})"
          echo "Version: $VERSION"
          echo "=========================================="

          # Create working directory
          WORK_DIR="/tmp/sysmanage-agent-$RELEASE"
          rm -rf "$WORK_DIR"
          mkdir -p "$WORK_DIR"

          # Copy source to working directory
          cp -r . "$WORK_DIR/"
          cd "$WORK_DIR"

          # Copy debian directory
          if [ -d "installer/ubuntu/debian" ]; then
            cp -r installer/ubuntu/debian .
          else
            echo "Error: debian directory not found"
            exit 1
          fi

          # Update changelog
          dch -v "${VERSION}+ppa1~${RELEASE}1" -D "$RELEASE" "New upstream release ${VERSION}"

          # Build source package (unsigned)
          debuild -S -sa -us -uc

          # Move to /tmp where files are
          cd ..

          # Create a temporary passphrase file for GPG
          echo "${{ secrets.LAUNCHPAD_GPG_PASSPHRASE }}" > /tmp/gpg-passphrase-${RELEASE}

          # Sign with passphrase from file
          debsign --re-sign -p"gpg --batch --yes --passphrase-file /tmp/gpg-passphrase-${RELEASE}" \
            -k"$GPG_KEY_ID" sysmanage-agent_${VERSION}+ppa1~${RELEASE}1_source.changes

          # Clean up passphrase file
          rm -f /tmp/gpg-passphrase-${RELEASE}

          # Upload to Launchpad PPA
          dput launchpad "sysmanage-agent_${VERSION}+ppa1~${RELEASE}1_source.changes"

          echo "SUCCESS! Uploaded to Launchpad PPA for $RELEASE"

  # Deploy to openSUSE Build Service
  deploy-obs:
    name: Deploy to OBS
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Determine version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version $VERSION to OBS"

      - name: Install OBS tools
        run: |
          sudo apt-get update
          sudo apt-get install -y osc

      - name: Configure OBS credentials
        env:
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          OBS_PASSWORD: ${{ secrets.OBS_PASSWORD }}
        run: |
          if [ -z "$OBS_USERNAME" ] || [ -z "$OBS_PASSWORD" ]; then
            echo "ERROR: OBS credentials not set!"
            echo "Please set OBS_USERNAME and OBS_PASSWORD secrets"
            exit 1
          fi

          mkdir -p ~/.config/osc
          cat > ~/.config/osc/oscrc << EOF
          [general]
          apiurl = https://api.opensuse.org

          [https://api.opensuse.org]
          user = $OBS_USERNAME
          pass = $OBS_PASSWORD
          EOF
          chmod 600 ~/.config/osc/oscrc

          echo "OBS credentials configured for user: $OBS_USERNAME"

      - name: Checkout OBS package
        env:
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
        run: |
          echo "Checking out OBS package home:${OBS_USERNAME}/sysmanage-agent"
          osc checkout home:${OBS_USERNAME}/sysmanage-agent
          cd home:${OBS_USERNAME}/sysmanage-agent
          echo "Current OBS package contents:"
          ls -la

      - name: Update package files
        env:
          VERSION: ${{ steps.version.outputs.version }}
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          cd home:${OBS_USERNAME}/sysmanage-agent

          # Copy spec file and rpmlintrc
          echo "Copying spec file and rpmlintrc from installer/opensuse/"
          cp $WORKSPACE/installer/opensuse/sysmanage-agent.spec .
          cp $WORKSPACE/installer/opensuse/sysmanage-agent-rpmlintrc .

          # Update version in spec file
          echo "Updating version to $VERSION in spec file"
          sed -i "s/^Version:.*/Version:        $VERSION/" sysmanage-agent.spec

          # Generate requirements-prod.txt from requirements.txt
          echo "Generating requirements-prod.txt..."
          python3 $WORKSPACE/scripts/update-requirements-prod.py

          # Create source tarball (OBS needs the source)
          echo "Creating source tarball..."
          TAR_NAME="sysmanage-agent-$VERSION"
          mkdir -p /tmp/$TAR_NAME

          # Copy source files from workspace
          cp -r $WORKSPACE/src /tmp/$TAR_NAME/
          cp $WORKSPACE/main.py /tmp/$TAR_NAME/
          cp $WORKSPACE/alembic.ini /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements-prod.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/README.md /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/README.md
          cp $WORKSPACE/LICENSE /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/LICENSE

          # Copy installer files
          mkdir -p /tmp/$TAR_NAME/installer/opensuse
          cp $WORKSPACE/installer/opensuse/*.service /tmp/$TAR_NAME/installer/opensuse/ || true
          cp $WORKSPACE/installer/opensuse/*.sudoers /tmp/$TAR_NAME/installer/opensuse/ || true
          cp $WORKSPACE/installer/opensuse/*.example /tmp/$TAR_NAME/installer/opensuse/ || true

          # Create tarball
          cd /tmp
          tar czf sysmanage-agent-$VERSION.tar.gz $TAR_NAME/
          echo "Created tarball: sysmanage-agent-$VERSION.tar.gz ($(du -h sysmanage-agent-$VERSION.tar.gz | cut -f1))"

          # Create vendor tarball for offline installation
          echo "Creating vendor tarball with pip dependencies..."
          mkdir -p /tmp/vendor
          # Download all dependencies (including transitive ones) for Python 3.11
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 311 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          # Also download source distributions for pure Python packages that may not have wheels
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 311 --no-binary :all: 2>/dev/null || true

          cd /tmp
          tar czf sysmanage-agent-vendor-$VERSION.tar.gz vendor/
          echo "Created vendor tarball: sysmanage-agent-vendor-$VERSION.tar.gz ($(du -h sysmanage-agent-vendor-$VERSION.tar.gz | cut -f1))"
          echo "Vendor tarball contains $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l) wheels"

          # Copy both tarballs to OBS directory
          cp sysmanage-agent-$VERSION.tar.gz $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage-agent/
          cp sysmanage-agent-vendor-$VERSION.tar.gz $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage-agent/

          cd $GITHUB_WORKSPACE/home:${OBS_USERNAME}/sysmanage-agent

          echo "OBS package directory contents:"
          ls -la

          # Remove old files
          osc remove *.tar.gz 2>/dev/null || true

          # Add new files
          osc add sysmanage-agent-$VERSION.tar.gz
          osc add sysmanage-agent-vendor-$VERSION.tar.gz
          osc add sysmanage-agent.spec
          osc add sysmanage-agent-rpmlintrc

          echo "Files staged for OBS:"
          osc status

      - name: Commit and push to OBS
        env:
          VERSION: ${{ steps.version.outputs.version }}
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
        run: |
          cd home:${OBS_USERNAME}/sysmanage-agent

          echo "Committing to OBS..."
          osc commit -m "Release version $VERSION"

          echo "SUCCESS! Uploaded version $VERSION to OBS"
          echo ""
          echo "View build status at:"
          echo "https://build.opensuse.org/package/show/home:${OBS_USERNAME}/sysmanage-agent"
          echo ""
          echo "OBS will now build for all configured targets:"
          echo "  - openSUSE Tumbleweed"
          echo "  - openSUSE Leap 15.6"
          echo "  - openSUSE Leap 15.5"
          echo "  - SLE 15 SP6"
          echo "  - SLE 15 SP5"

  # Deploy to Fedora Copr (runs in parallel with OBS)
  deploy-copr:
    name: Deploy to Fedora Copr
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Determine version
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version $VERSION to Copr"

      - name: Install Copr CLI and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip rpm

          # Install copr-cli via pip (not available in Ubuntu repos)
          pip3 install copr-cli

          # Add pip binaries to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Copr credentials
        env:
          COPR_LOGIN: ${{ secrets.COPR_LOGIN }}
          COPR_API_TOKEN: ${{ secrets.COPR_API_TOKEN }}
          COPR_USERNAME: ${{ secrets.COPR_USERNAME }}
        run: |
          if [ -z "$COPR_LOGIN" ] || [ -z "$COPR_API_TOKEN" ] || [ -z "$COPR_USERNAME" ]; then
            echo "ERROR: Copr credentials not set!"
            echo "Please set COPR_LOGIN, COPR_API_TOKEN, and COPR_USERNAME secrets"
            exit 1
          fi

          mkdir -p ~/.config
          cat > ~/.config/copr << 'EOF'
          [copr-cli]
          login = $COPR_LOGIN
          username = $COPR_USERNAME
          token = $COPR_API_TOKEN
          copr_url = https://copr.fedorainfracloud.org
          EOF

          # Substitute variables in the config file
          sed -i "s/\$COPR_LOGIN/$COPR_LOGIN/" ~/.config/copr
          sed -i "s/\$COPR_USERNAME/$COPR_USERNAME/" ~/.config/copr
          sed -i "s/\$COPR_API_TOKEN/$COPR_API_TOKEN/" ~/.config/copr

          chmod 600 ~/.config/copr

          echo "Copr credentials configured for user: $COPR_USERNAME"

      - name: Test Copr credentials
        env:
          COPR_USERNAME: ${{ secrets.COPR_USERNAME }}
        run: |
          echo "Testing Copr API connection..."
          copr-cli whoami
          echo ""
          echo "Listing user projects..."
          copr-cli list $COPR_USERNAME || echo "No projects yet or connection issue"

      - name: Prepare source files
        env:
          VERSION: ${{ steps.version.outputs.version }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "Preparing source files for version $VERSION"

          # Generate requirements-prod.txt from requirements.txt
          echo "Generating requirements-prod.txt..."
          python3 $WORKSPACE/scripts/update-requirements-prod.py

          # Create source tarball
          echo "Creating source tarball..."
          TAR_NAME="sysmanage-agent-$VERSION"
          mkdir -p /tmp/$TAR_NAME

          # Copy source files
          cp -r $WORKSPACE/src /tmp/$TAR_NAME/
          cp $WORKSPACE/main.py /tmp/$TAR_NAME/
          cp $WORKSPACE/alembic.ini /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/requirements-prod.txt /tmp/$TAR_NAME/
          cp $WORKSPACE/README.md /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/README.md
          cp $WORKSPACE/LICENSE /tmp/$TAR_NAME/ || touch /tmp/$TAR_NAME/LICENSE

          # Copy installer files (using opensuse files which work for RHEL/Fedora too)
          mkdir -p /tmp/$TAR_NAME/installer/opensuse
          cp $WORKSPACE/installer/opensuse/*.service /tmp/$TAR_NAME/installer/opensuse/ 2>/dev/null || true
          cp $WORKSPACE/installer/opensuse/*.sudoers /tmp/$TAR_NAME/installer/opensuse/ 2>/dev/null || true
          cp $WORKSPACE/installer/opensuse/*.example /tmp/$TAR_NAME/installer/opensuse/ 2>/dev/null || true

          # Create tarball
          cd /tmp
          tar czf sysmanage-agent-$VERSION.tar.gz $TAR_NAME/
          echo "Created tarball: sysmanage-agent-$VERSION.tar.gz ($(du -h sysmanage-agent-$VERSION.tar.gz | cut -f1))"

          # Create vendor tarball with wheels for multiple Python versions
          echo "Creating vendor tarball with pip dependencies for multiple Python versions..."
          echo ""
          echo "Current pip version:"
          pip3 --version
          echo ""
          echo "Upgrading pip to latest version..."
          pip3 install --upgrade pip
          echo ""
          echo "Updated pip version:"
          pip3 --version
          echo ""
          echo "Contents of requirements-prod.txt:"
          cat $WORKSPACE/requirements-prod.txt
          echo ""

          mkdir -p /tmp/vendor

          # Download wheels for Python 3.9 (EPEL 9, CentOS Stream 9, Amazon Linux 2023)
          # Note: Use 3.9.21 to avoid cryptography's exclusion of 3.9.0 and 3.9.1
          echo "Downloading wheels for Python 3.9 (EPEL 9, CentOS Stream 9, Amazon Linux 2023)..."
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 3.9.21 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          # Download conditional dependencies for Python <3.11
          pip3 download "async-timeout<6.0,>=4.0" -d /tmp/vendor --python-version 3.9.21 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          pip3 download tomli -d /tmp/vendor --python-version 3.9.21 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          echo "Downloaded $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l) wheels for Python 3.9"

          # Note: Skipping Python 3.11 - no distributions currently use it

          # Download wheels for Python 3.12 (EPEL 10, CentOS Stream 10)
          echo ""
          echo "Downloading wheels for Python 3.12 (EPEL 10, CentOS Stream 10)..."
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 3.12.11 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          echo "Total wheels after Python 3.12: $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l)"

          # Download wheels for Python 3.13 (Fedora 41, 42)
          echo ""
          echo "Downloading wheels for Python 3.13 (Fedora 41, 42)..."
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 3.13.1 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          echo "Total wheels after Python 3.13: $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l)"

          # Download wheels for Python 3.14 (Fedora 43)
          echo ""
          echo "Downloading wheels for Python 3.14 (Fedora 43)..."
          pip3 download -r $WORKSPACE/requirements-prod.txt -d /tmp/vendor --python-version 3.14.0 --platform manylinux2014_x86_64 --platform manylinux_2_17_x86_64 --only-binary=:all:
          echo "Total wheels after Python 3.14: $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l)"

          # Verify all required packages are present
          echo ""
          echo "Verifying all required packages in vendor directory..."
          WHEEL_COUNT=$(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l)
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "ERROR: No wheels downloaded to vendor directory!"
            exit 1
          fi
          echo "Total wheels in vendor directory: $WHEEL_COUNT"

          # Verify each top-level package from requirements-prod.txt is present
          for pkg in websockets PyYAML aiohttp cryptography SQLAlchemy alembic; do
            pkg_lower=$(echo "$pkg" | tr '[:upper:]' '[:lower:]' | tr '-' '_')
            if ls /tmp/vendor/${pkg_lower}* 1> /dev/null 2>&1 || ls /tmp/vendor/${pkg}* 1> /dev/null 2>&1; then
              echo "  âœ“ $pkg"
            else
              echo "  âœ— $pkg MISSING!"
              echo "ERROR: Required package $pkg not found in vendor directory"
              exit 1
            fi
          done

          # Show what we downloaded
          echo ""
          echo "Vendor directory contents (first 30 files):"
          ls -lh /tmp/vendor/ | head -30

          cd /tmp
          tar czf sysmanage-agent-vendor-$VERSION.tar.gz vendor/
          echo "Created vendor tarball: sysmanage-agent-vendor-$VERSION.tar.gz ($(du -h sysmanage-agent-vendor-$VERSION.tar.gz | cut -f1))"
          echo "Vendor tarball contains $(ls -1 /tmp/vendor/*.whl 2>/dev/null | wc -l) wheels and $(ls -1 /tmp/vendor/*.tar.gz 2>/dev/null | wc -l) source packages"

          # Copy to rpmbuild directory
          mkdir -p ~/rpmbuild/SOURCES
          cp sysmanage-agent-$VERSION.tar.gz ~/rpmbuild/SOURCES/
          cp sysmanage-agent-vendor-$VERSION.tar.gz ~/rpmbuild/SOURCES/

      - name: Create SRPM
        env:
          VERSION: ${{ steps.version.outputs.version }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo "Creating SRPM for version $VERSION"

          # Copy and update spec file
          cp $WORKSPACE/installer/opensuse/sysmanage-agent.spec ~/rpmbuild/SOURCES/
          cd ~/rpmbuild/SOURCES

          # Update version in spec file
          sed -i "s/^Version:.*/Version:        $VERSION/" sysmanage-agent.spec

          # Build SRPM
          rpmbuild -bs sysmanage-agent.spec --define "_topdir $HOME/rpmbuild"

          # Find the SRPM
          SRPM=$(find ~/rpmbuild/SRPMS -name "sysmanage-agent-*.src.rpm" | head -1)
          echo "Created SRPM: $SRPM"
          ls -lh $SRPM

          # Save SRPM path for next step
          echo "SRPM_PATH=$SRPM" >> $GITHUB_ENV

      - name: Upload to Copr
        env:
          VERSION: ${{ steps.version.outputs.version }}
          COPR_USERNAME: ${{ secrets.COPR_USERNAME }}
        run: |
          echo "Uploading SRPM to Copr..."
          echo "Project: $COPR_USERNAME/sysmanage-agent"
          echo "SRPM: $SRPM_PATH"

          # Upload and build
          copr-cli build $COPR_USERNAME/sysmanage-agent $SRPM_PATH

          echo ""
          echo "SUCCESS! Uploaded version $VERSION to Copr"
          echo ""
          echo "View build status at:"
          echo "https://copr.fedorainfracloud.org/coprs/$COPR_USERNAME/sysmanage-agent/builds/"
          echo ""
          echo "Copr will now build for all configured chroots:"
          echo "  - Fedora 41 (Python 3.13)"
          echo "  - Fedora 42 (Python 3.13)"
          echo "  - Fedora 43 (Python 3.14)"
          echo "  - EPEL 9 (RHEL 9, Rocky 9, AlmaLinux 9, CentOS Stream 9 - Python 3.9)"
          echo "  - EPEL 10 (RHEL 10, CentOS Stream 10 - Python 3.12)"
          echo "  - Amazon Linux 2023 (Python 3.9)"
          echo ""
          echo "Note: EPEL 8 (Python 3.6) is not supported - dependencies require Python >=3.9"
          echo ""
          echo "Installation instructions:"
          echo "  sudo dnf copr enable $COPR_USERNAME/sysmanage-agent"
          echo "  sudo dnf install sysmanage-agent"

  deploy-snap-strict:
    name: Build and Publish Snap (Strict)
    runs-on: ubuntu-22.04
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building snap version: $VERSION"

      - name: Create VERSION file
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          echo "VERSION file contents:"
          cat VERSION

      - name: Create source tarball for snap
        run: |
          echo "Creating clean source tarball..."
          tar czf installer/ubuntu-snap-strict/sysmanage-agent-src.tar.gz \
            --exclude='.venv' \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='agent.db' \
            src main.py alembic.ini VERSION
          echo "Tarball created successfully"
          ls -lh installer/ubuntu-snap-strict/sysmanage-agent-src.tar.gz

      - name: Build snap with snapcraft
        uses: snapcore/action-build@v1
        id: build_snap
        with:
          path: installer/ubuntu-snap-strict

      - name: List built snap
        run: |
          ls -lh installer/ubuntu-snap-strict/*.snap

      - name: Get snap filename
        id: snap_file
        run: |
          SNAP_FILE=$(ls installer/ubuntu-snap-strict/sysmanage-agent-strict_*.snap | head -1)
          echo "snap_file=$SNAP_FILE" >> $GITHUB_OUTPUT
          echo "Built snap: $SNAP_FILE"

      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Upload snap to edge channel
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          snapcraft upload --release=edge ${{ steps.snap_file.outputs.snap_file }}

      - name: Get snap status
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          snapcraft status sysmanage-agent-strict

      - name: Print completion message
        run: |
          echo "========================================="
          echo "Snap Published Successfully!"
          echo "========================================="
          echo ""
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Channel: edge"
          echo ""
          echo "View at: https://snapcraft.io/sysmanage-agent-strict"
          echo ""
          echo "Install with:"
          echo "  sudo snap install sysmanage-agent-strict --edge"
