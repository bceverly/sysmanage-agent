name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test-backend:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to update README badge
      pull-requests: write  # Allow creating pull requests

    strategy:
      fail-fast: false  # Continue testing other versions even if one fails
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        # Python 3.9 included for macOS system Python compatibility
        # Python 3.14 excluded due to incompatibility with ruamel.yaml.clib (semgrep dependency)
        # See: https://github.com/ruamel/yaml.clib/issues/25

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true  # Allow testing on pre-release Python versions

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run backend tests
      run: |
        python -m pytest tests/ -v --cov=src --cov=main --cov-report=xml --cov-report=term-missing

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'{coverage:.0f}')
        ")
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

        # Determine color based on coverage
        if [ $COVERAGE -ge 90 ]; then
          COLOR="brightgreen"
        elif [ $COVERAGE -ge 80 ]; then
          COLOR="green"
        elif [ $COVERAGE -ge 70 ]; then
          COLOR="yellowgreen"
        elif [ $COVERAGE -ge 60 ]; then
          COLOR="yellow"
        elif [ $COVERAGE -ge 40 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "Badge color: $COLOR"

    - name: Update README badge
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.python-version == '3.12'
      run: |
        sed -i "s/test%20coverage-[0-9]*%25-[a-z]*/test%20coverage-${{ steps.coverage.outputs.percentage }}%25-${{ steps.coverage.outputs.color }}/g" README.md

    - name: Create Pull Request for coverage badge update
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.python-version == '3.12'
      id: coverage-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.AUTO_MERGE_TOKEN }}
        commit-message: "Update test coverage badge to ${{ steps.coverage.outputs.percentage }}% [skip ci]"
        title: "Update test coverage badge to ${{ steps.coverage.outputs.percentage }}%"
        body: |
          ðŸ”§ **Test Coverage Badge Update**

          - **Coverage**: ${{ steps.coverage.outputs.percentage }}%
          - **Badge Color**: ${{ steps.coverage.outputs.color }}

          Generated automatically by CI pipeline.
        branch: update-coverage-badge-${{ github.run_number }}
        delete-branch: true

    - name: Enable auto-merge for coverage badge PR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.python-version == '3.12' && steps.coverage-pr.outputs.pull-request-number
      run: |
        gh pr merge ${{ steps.coverage-pr.outputs.pull-request-number }} --auto --squash
      env:
        GITHUB_TOKEN: ${{ secrets.AUTO_MERGE_TOKEN }}

    - name: Upload backend coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: backend
        name: backend-coverage

  lint-backend:
    name: Backend Linting
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint black bandit safety

    - name: Run Black formatter check
      run: |
        python -m black --check --diff src/ tests/

    - name: Run Pylint
      run: |
        python -m pylint src/ --rcfile=.pylintrc --exit-zero

    - name: Run Bandit security scan
      run: |
        python -m bandit -r src/ -f screen
        # Also generate JSON report for artifacts
        python -m bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v5
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Install project dependencies for Safety scan
      run: |
        pip install -r requirements.txt

    - name: Run Safety scan
      run: |
        safety scan --output screen || true
        safety scan --output json --output-file safety-report.json || true

    - name: Upload Safety results
      uses: actions/upload-artifact@v5
      if: hashFiles('safety-report.json') != ''
      with:
        name: safety-report
        path: safety-report.json

  build:
    name: Build Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [test-backend, lint-backend]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify imports and basic functionality
      run: |
        python -c "import main; print('Imports successful')"
