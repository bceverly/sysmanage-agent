name: Test Windows Installer Build

on:
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.1.0 or v0.1.0)'
        required: true
        type: string

  # Also trigger on version tags for testing
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows MSI (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: version
        shell: pwsh
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          REF: ${{ github.ref }}
        run: |
          if ($env:EVENT_NAME -eq "workflow_dispatch") {
            # Strip 'v' prefix if present in manual input
            $VERSION = $env:INPUT_VERSION -replace '^v', ''
          } else {
            # Extract version from tag (remove 'v' prefix and refs/tags/)
            $VERSION = $env:REF -replace '^refs/tags/v', ''
          }

          Write-Host "Building version: $VERSION"
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          Write-Host "Installing WiX Toolset v5..."

          # Install WiX using dotnet tool
          dotnet tool install --global wix --version 5.0.2

          # Add dotnet tools to PATH for this session
          $dotnetToolsPath = Join-Path $env:USERPROFILE ".dotnet\tools"
          $env:PATH = "$dotnetToolsPath;$env:PATH"

          # Verify installation
          wix --version

          Write-Host "WiX Toolset installed successfully"

      - name: Build Windows MSI installer
        shell: pwsh
        env:
          VERSION: ${{ steps.version.outputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          Write-Host "Building Windows MSI installer for $env:ARCH..."

          # Ensure dotnet tools are in PATH
          $dotnetToolsPath = Join-Path $env:USERPROFILE ".dotnet\tools"
          $env:PATH = "$dotnetToolsPath;$env:PATH"

          # Run the build script
          .\installer\windows\build-msi.ps1 -Architecture $env:ARCH

          Write-Host "Build completed successfully"

      - name: Verify MSI package
        shell: pwsh
        env:
          VERSION: ${{ steps.version.outputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          $msiFile = "installer\dist\sysmanage-agent-$env:VERSION-windows-$env:ARCH.msi"

          if (-not (Test-Path $msiFile)) {
            Write-Host "ERROR: MSI file not found at $msiFile"
            Get-ChildItem installer\dist -ErrorAction SilentlyContinue
            exit 1
          }

          Write-Host "MSI package built successfully:"
          Write-Host "  File: $msiFile"
          Write-Host "  Size: $((Get-Item $msiFile).Length / 1MB | ForEach-Object { '{0:N2}' -f $_ }) MB"

          # Show MSI properties
          Write-Host ""
          Write-Host "MSI Properties:"
          # Note: We can't easily inspect MSI on GitHub runners without additional tools
          # but we can verify it exists and has reasonable size

      - name: Generate SHA256 checksum
        shell: pwsh
        env:
          VERSION: ${{ steps.version.outputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          $msiFile = "installer\dist\sysmanage-agent-$env:VERSION-windows-$env:ARCH.msi"
          $checksumFile = "$msiFile.sha256"

          $hash = (Get-FileHash -Path $msiFile -Algorithm SHA256).Hash.ToLower()
          $filename = Split-Path $msiFile -Leaf
          "$hash  $filename" | Out-File -FilePath $checksumFile -Encoding ascii

          Write-Host "SHA256 checksum generated:"
          Get-Content $checksumFile

      - name: Upload MSI as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sysmanage-agent-windows-${{ matrix.arch }}-msi
          path: |
            installer/dist/sysmanage-agent-*.msi
            installer/dist/sysmanage-agent-*.msi.sha256
          retention-days: 30

  # Summary job that runs after both builds complete
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-windows
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display build summary
        run: |
          echo "=== Windows Installer Build Summary ==="
          echo ""
          echo "Artifacts built:"
          find artifacts/ -name "*.msi" -o -name "*.sha256" | sort
          echo ""
          echo "Artifact sizes:"
          find artifacts/ -name "*.msi" -exec ls -lh {} \; | awk '{print $9, $5}'
          echo ""
          echo "Build status: ${{ needs.build-windows.result }}"
